
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;

import javax.swing.*;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

import java.time.LocalDate;
import javax.swing.event.DocumentEvent;

/**
 *
 * @author User
 */
public class archives extends javax.swing.JFrame {

    private String url = "jdbc:mysql://localhost:3306/client";
    private String username = "root";
    private String password = "";

    /**
     * Creates new form test
     */
    public archives() {
        initComponents();

        search.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) {
                filter();
            }

            public void removeUpdate(DocumentEvent e) {
                filter();
            }

            public void insertUpdate(DocumentEvent e) {
                filter();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        tableClient = new javax.swing.JTable();
        javax.swing.JLabel jLabel8 = new javax.swing.JLabel();
        search = new javax.swing.JTextField();
        javax.swing.JButton back = new javax.swing.JButton();
        javax.swing.JButton print = new javax.swing.JButton();
        javax.swing.JButton reset = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }

            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 145, 194));

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/1 (2).png"))); // NOI18N
        jLabel1.setText("Booking Archives");

        tableClient.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        tableClient.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {

                },
                new String[] {
                        "ID", "Date", "Name", "Room Type", "Email", "Phone", "Check-In", "Check-Out", "Head Count",
                        "C-O Date"
                }) {
            boolean[] canEdit = new boolean[] {
                    false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableClient);

        jLabel8.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel8.setText("Search:");

        search.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N

        back.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        print.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        print.setText("Print DB CSV");
        print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printActionPerformed(evt);
            }
        });

        reset.setBackground(new java.awt.Color(204, 0, 51));
        reset.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        reset.setForeground(new java.awt.Color(255, 255, 255));
        reset.setText("RESET");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 807,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(back)
                                                .addGap(14, 14, 14))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(jPanel1Layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addComponent(jLabel8,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE, 60,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(
                                                                        javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(search,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE, 703,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(
                                                                        javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(reset,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE, 118,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(
                                                                        javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(print,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE, 121,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(jScrollPane1))))
                                .addContainerGap()));
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(back))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel8)
                                        .addComponent(print)
                                        .addComponent(reset))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 525, Short.MAX_VALUE)
                                .addContainerGap()));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {
        String response = JOptionPane.showInputDialog(null, "Type CONFIRM to delete all rows", "Confirm",
                JOptionPane.WARNING_MESSAGE);

        if ("CONFIRM".equals(response)) {
            deleteROWS();
            displayInfo();
            JOptionPane.showMessageDialog(null, "All rows deleted successfully!", "Success",
                    JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Incorrect input. Please type CONFIRM to delete all rows.", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }// GEN-LAST:event_resetActionPerformed

    private void deleteROWS() {
        try (Connection connection = DriverManager.getConnection(url, username, password)) {
            String sql = "DELETE FROM checked_out_archive";
            try (PreparedStatement statement = connection.prepareStatement(sql)) {
                int rowsDeleted = statement.executeUpdate();
                if (rowsDeleted > 0) {
                    System.out.println(rowsDeleted + " rows deleted successfully!");
                }
            }
        } catch (SQLException e) {
            System.err.println("Failed to delete rows from the database!");
            e.printStackTrace();
        }
    }

    private void printActionPerformed(java.awt.event.ActionEvent evt) {
        try (Connection connection = DriverManager.getConnection(url, username, password)) {
            String selectSql = "SELECT * FROM checked_out_archive";
            try (PreparedStatement selectStatement = connection.prepareStatement(selectSql);
                    ResultSet resultSet = selectStatement.executeQuery()) {

                FileWriter csvWriter = new FileWriter("archives.csv");
                csvWriter
                        .append("ID,BOOKING_DATE,NAME,ROOMTYPE,EMAIL,PHONE,CHECKIN,CHECKOUT,HEADCOUNT,CHECKOUT_DATE\n");
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
                while (resultSet.next()) {
                    csvWriter.append(resultSet.getString("ID"));
                    csvWriter.append(",");
                    csvWriter.append(resultSet.getString("BOOKING_DATE"));
                    csvWriter.append(",");
                    csvWriter.append(resultSet.getString("NAME"));
                    csvWriter.append(",");
                    csvWriter.append(resultSet.getString("ROOMTYPE"));
                    csvWriter.append(",");
                    csvWriter.append(resultSet.getString("EMAIL"));
                    csvWriter.append(",");
                    csvWriter.append(resultSet.getString("PHONE"));
                    csvWriter.append(",");
                    csvWriter.append(resultSet.getString("CHECKIN"));
                    csvWriter.append(",");
                    csvWriter.append(resultSet.getString("CHECKOUT"));
                    csvWriter.append(",");
                    csvWriter.append(resultSet.getString("HEADCOUNT"));
                    csvWriter.append(",");
                    csvWriter.append(resultSet.getString("CHECKOUT_DATE"));
                    csvWriter.append("\n");
                }

                csvWriter.flush();
                csvWriter.close();

                JOptionPane.showMessageDialog(null, "CSV file created successfully.", "Success",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (SQLException | IOException e) {
            System.err.println("Failed to create CSV file!");
            e.printStackTrace();
        }
    }// GEN-LAST:event_printActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {
        bookings newForm = new bookings();
        newForm.setVisible(true);
        this.dispose();
    }// GEN-LAST:event_logoutActionPerformed

    private void displayInfo() {
        DefaultTableModel model = (DefaultTableModel) tableClient.getModel();
        model.setRowCount(0);
        try (Connection connection = DriverManager.getConnection(url, username, password)) {
            String sql = "SELECT * FROM checked_out_archive";
            try (PreparedStatement statement = connection.prepareStatement(sql)) {
                try (ResultSet results = statement.executeQuery()) {
                    while (results.next()) {
                        model.addRow(new Object[] { results.getInt("ID"),
                                results.getDate("BOOKING_DATE"),
                                results.getString("NAME"),
                                results.getString("ROOMTYPE"),
                                results.getString("EMAIL"),
                                results.getString("PHONE"),
                                results.getString("CHECKIN"),
                                results.getString("CHECKOUT"),
                                results.getString("HEADCOUNT"),
                                results.getDate("CHECKOUT_DATE")
                        });
                    }
                }
            }
        } catch (SQLException e) {
            System.err.println("Failed to retrieve data from the database!");
            e.printStackTrace();
        }
    };

    private void formWindowClosing(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_formWindowClosing

    }// GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {
        displayInfo();

    }// GEN-LAST:event_formWindowOpened

    private void filter() {
        String filterText = search.getText();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(
                (DefaultTableModel) tableClient.getModel());
        tableClient.setRowSorter(sorter);

        if (filterText.trim().length() == 0) {
            sorter.setRowFilter(null);
        } else {
            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + filterText));
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
                    .getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(update.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(update.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(update.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(update.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new update().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextField search;
    public javax.swing.JTable tableClient;
    // End of variables declaration//GEN-END:variables
}
